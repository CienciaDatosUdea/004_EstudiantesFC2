#!/usr/bin/env python3
import argparse
import os
import math

import matplotlib.pyplot as plt
import imageio.v3 as iio
import numpy as np

def read_blocks(path):
    """Read output.dat-like file: blocks of 'x T' lines separated by blank lines."""
    blocks = []
    xs, Ts = [], []
    with open(path, "r") as f:
        for line in f:
            line = line.strip()
            if not line:
                if xs and Ts:
                    blocks.append((xs, Ts))
                    xs, Ts = [], []
                continue
            parts = line.split()
            if len(parts) < 2:
                continue
            x, T = float(parts[0]), float(parts[1])
            xs.append(x)
            Ts.append(T)
    if xs and Ts:
        blocks.append((xs, Ts))
    return blocks

def make_gif(input_path, output_path, fps=20, dpi=120, ylim=None):
    blocks = read_blocks(input_path)
    if not blocks:
        raise SystemExit(f"No data blocks found in {input_path}")

    # Consistent axes
    x0 = blocks[0][0]
    xmin, xmax = min(x0), max(x0)
    if ylim is None:
        ymin = min(min(Ts) for _, Ts in blocks)
        ymax = max(max(Ts) for _, Ts in blocks)
        pad = 0.05 * (ymax - ymin if ymax > ymin else 1.0)
        ylim = (ymin - pad, ymax + pad)

    frames = []
    for k, (xs, Ts) in enumerate(blocks):
        fig = plt.figure(figsize=(6, 3.2), dpi=dpi)
        ax = plt.gca()
        ax.plot(xs, Ts)  # default color, no style set
        ax.set_xlim(xmin, xmax)
        ax.set_ylim(*ylim)
        ax.set_xlabel("x")
        ax.set_ylabel("Temperature")
        ax.set_title(f"1D Diffusion (step {k+1}/{len(blocks)})")
        fig.canvas.draw()

        # Convert canvas to RGBA numpy array
        w, h = fig.canvas.get_width_height()
        buf = np.frombuffer(fig.canvas.tostring_argb(), dtype=np.uint8)
        buf.shape = (h, w, 4)
        buf = buf[:, :, [1, 2, 3, 0]]  # ARGB -> RGBA
        frames.append(buf)
        plt.close(fig)

    iio.imwrite(output_path, frames, plugin="pillow", duration=1.0 / fps, loop=0)
    print(f"Saved GIF to {output_path} ({len(frames)} frames, {fps} fps).")

def main():
    p = argparse.ArgumentParser(description="Make a GIF from diffusion output.dat")
    p.add_argument("input", help="Path to output.dat (blocks of 'x T')")
    p.add_argument("gif", nargs="?", default="diffusion.gif", help="Output GIF filename")
    p.add_argument("--fps", type=int, default=20, help="Frames per second")
    p.add_argument("--dpi", type=int, default=120, help="DPI for frame rendering")
    p.add_argument("--ymin", type=float, default=None, help="Force ymin")
    p.add_argument("--ymax", type=float, default=None, help="Force ymax")
    args = p.parse_args()

    ylim = None
    if args.ymin is not None and args.ymax is not None:
        ylim = (args.ymin, args.ymax)

    make_gif(args.input, args.gif, fps=args.fps, dpi=args.dpi, ylim=ylim)

if __name__ == "__main__":
    main()
